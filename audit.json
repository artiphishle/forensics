{
  "evaluation": {
    "cyclicPackages": [
      "src.themes",
      "src.hooks",
      "src.contexts"
    ]
  },
  "files": {
    "bin": {
      "forensics.ts": {
        "className": "forensics",
        "imports": [
          {
            "name": "node:fs",
            "pkg": "",
            "isIntrinsic": false
          },
          {
            "name": "node:fs.promises",
            "pkg": "node:fs",
            "isIntrinsic": false
          },
          {
            "name": "node:path",
            "pkg": "",
            "isIntrinsic": false
          },
          {
            "name": "node:url",
            "pkg": "",
            "isIntrinsic": false
          },
          {
            "name": "node:net",
            "pkg": "",
            "isIntrinsic": false
          }
        ],
        "methods": [],
        "calls": [
          {
            "callee": "process",
            "method": "exit"
          },
          {
            "callee": "console",
            "method": "log"
          },
          {
            "callee": "console",
            "method": "log"
          },
          {
            "callee": "net.createServer()",
            "method": "once"
          },
          {
            "callee": "net",
            "method": "createServer"
          },
          {
            "callee": "srv",
            "method": "listen"
          },
          {
            "callee": "srv",
            "method": "close"
          },
          {
            "callee": "net",
            "method": "createServer"
          },
          {
            "callee": "srv",
            "method": "listen"
          },
          {
            "callee": "srv",
            "method": "address"
          },
          {
            "callee": "srv",
            "method": "close"
          },
          {
            "callee": "Date",
            "method": "now"
          },
          {
            "callee": "Date",
            "method": "now"
          },
          {
            "callee": "res.headers",
            "method": "get"
          },
          {
            "callee": "ct",
            "method": "includes"
          },
          {
            "callee": "res",
            "method": "json"
          },
          {
            "callee": "Date",
            "method": "now"
          },
          {
            "callee": "Bun",
            "method": "spawn"
          },
          {
            "callee": "process",
            "method": "cwd"
          },
          {
            "callee": "Bun",
            "method": "spawn"
          },
          {
            "callee": "child.stdout",
            "method": "getReader"
          },
          {
            "callee": "reader",
            "method": "read"
          },
          {
            "callee": "process.stdout",
            "method": "write"
          },
          {
            "callee": "reader",
            "method": "releaseLock"
          },
          {
            "callee": "child.stderr",
            "method": "getReader"
          },
          {
            "callee": "reader",
            "method": "read"
          },
          {
            "callee": "process.stderr",
            "method": "write"
          },
          {
            "callee": "reader",
            "method": "releaseLock"
          },
          {
            "callee": "JSON",
            "method": "stringify"
          },
          {
            "callee": "JSON",
            "method": "stringify"
          },
          {
            "callee": "console",
            "method": "log"
          },
          {
            "callee": "console",
            "method": "log"
          },
          {
            "callee": "child",
            "method": "kill"
          },
          {
            "callee": "child",
            "method": "kill"
          },
          {
            "callee": "main()",
            "method": "catch"
          },
          {
            "callee": "console",
            "method": "error"
          },
          {
            "callee": "process",
            "method": "exit"
          }
        ],
        "package": "bin",
        "path": "bin/forensics.ts"
      }
    },
    "next-env.d.ts": {
      "className": "next-env.d",
      "imports": [],
      "methods": [],
      "calls": [],
      "package": "",
      "path": "next-env.d.ts"
    },
    "next.config.ts": {
      "className": "next.config",
      "imports": [
        {
          "name": "next",
          "pkg": "",
          "isIntrinsic": false
        }
      ],
      "methods": [],
      "calls": [],
      "package": "",
      "path": "next.config.ts"
    },
    "src": {
      "app": {
        "api": {
          "audit": {
            "json": {
              "route.ts": {
                "className": "route",
                "imports": [
                  {
                    "name": "next.server",
                    "pkg": "next",
                    "isIntrinsic": false
                  },
                  {
                    "name": "src.utils.getAudit",
                    "pkg": "src.utils",
                    "isIntrinsic": true
                  }
                ],
                "methods": [],
                "calls": [
                  {
                    "callee": "JSON",
                    "method": "stringify"
                  }
                ],
                "package": "src.app.api.audit.json",
                "path": "src/app/api/audit/json/route.ts"
              }
            },
            "xml": {
              "route.ts": {
                "className": "route",
                "imports": [
                  {
                    "name": "next.server",
                    "pkg": "next",
                    "isIntrinsic": false
                  },
                  {
                    "name": "xml-js",
                    "pkg": "",
                    "isIntrinsic": false
                  },
                  {
                    "name": "src.utils.getAudit",
                    "pkg": "src.utils",
                    "isIntrinsic": true
                  }
                ],
                "methods": [],
                "calls": [],
                "package": "src.app.api.audit.xml",
                "path": "src/app/api/audit/xml/route.ts"
              }
            }
          },
          "fs": {
            "detectLanguage": {
              "route.ts": {
                "className": "route",
                "imports": [
                  {
                    "name": "src.utils.detectLanguage",
                    "pkg": "src.utils",
                    "isIntrinsic": true
                  },
                  {
                    "name": "next.server",
                    "pkg": "next",
                    "isIntrinsic": false
                  }
                ],
                "methods": [],
                "calls": [
                  {
                    "callee": "NextResponse",
                    "method": "json"
                  }
                ],
                "package": "src.app.api.fs.detectLanguage",
                "path": "src/app/api/fs/detectLanguage/route.ts"
              }
            },
            "getAllFilesRecursive": {
              "route.ts": {
                "className": "route",
                "imports": [
                  {
                    "name": "src.utils.getParsedFileStructure",
                    "pkg": "src.utils",
                    "isIntrinsic": true
                  },
                  {
                    "name": "next.server",
                    "pkg": "next",
                    "isIntrinsic": false
                  }
                ],
                "methods": [],
                "calls": [
                  {
                    "callee": "NextResponse",
                    "method": "json"
                  }
                ],
                "package": "src.app.api.fs.getAllFilesRecursive",
                "path": "src/app/api/fs/getAllFilesRecursive/route.ts"
              }
            },
            "getGraph": {
              "route.ts": {
                "className": "route",
                "imports": [
                  {
                    "name": "next.server",
                    "pkg": "next",
                    "isIntrinsic": false
                  },
                  {
                    "name": "src.utils.cytoscape.buildGraph",
                    "pkg": "src.utils.cytoscape",
                    "isIntrinsic": true
                  },
                  {
                    "name": "src.utils.getParsedFileStructure",
                    "pkg": "src.utils",
                    "isIntrinsic": true
                  },
                  {
                    "name": "src.utils.cytoscape.rules.markCyclicPackages",
                    "pkg": "src.utils.cytoscape.rules",
                    "isIntrinsic": true
                  }
                ],
                "methods": [],
                "calls": [
                  {
                    "callee": "NextResponse",
                    "method": "json"
                  },
                  {
                    "callee": "NextResponse",
                    "method": "json"
                  }
                ],
                "package": "src.app.api.fs.getGraph",
                "path": "src/app/api/fs/getGraph/route.ts"
              }
            }
          }
        },
        "layout.tsx": {
          "className": "layout.tsx",
          "imports": [
            {
              "name": "next",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "next.font.google",
              "pkg": "next.font",
              "isIntrinsic": false
            },
            {
              "name": "src.app.globals.css",
              "pkg": "src.app",
              "isIntrinsic": true
            },
            {
              "name": "src.app.providers",
              "pkg": "src.app",
              "isIntrinsic": true
            }
          ],
          "methods": [],
          "calls": [],
          "package": "src.app",
          "path": "src/app/layout.tsx"
        },
        "page.tsx": {
          "className": "page.tsx",
          "imports": [
            {
              "name": "cytoscape",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "react",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "src.components.Breadcrumb",
              "pkg": "src.components",
              "isIntrinsic": true
            },
            {
              "name": "src.components.ZoomInput",
              "pkg": "src.components",
              "isIntrinsic": true
            },
            {
              "name": "src.components.Header",
              "pkg": "src.components",
              "isIntrinsic": true
            },
            {
              "name": "src.components.Main",
              "pkg": "src.components",
              "isIntrinsic": true
            },
            {
              "name": "src.components.Loader",
              "pkg": "src.components",
              "isIntrinsic": true
            },
            {
              "name": "src.utils.getJson",
              "pkg": "src.utils",
              "isIntrinsic": true
            },
            {
              "name": "src.hooks.useCytoscape",
              "pkg": "src.hooks",
              "isIntrinsic": true
            }
          ],
          "methods": [],
          "calls": [
            {
              "callee": "getJson<ElementsDefinition>('/api/fs/getGraph')",
              "method": "then"
            },
            {
              "callee": "console",
              "method": "log"
            },
            {
              "callee": "currentPackage",
              "method": "replace"
            },
            {
              "callee": "path",
              "method": "replace"
            }
          ],
          "package": "src.app",
          "path": "src/app/page.tsx"
        },
        "providers.tsx": {
          "className": "providers.tsx",
          "imports": [
            {
              "name": "next-themes",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "src.contexts.SettingsContext",
              "pkg": "src.contexts",
              "isIntrinsic": true
            }
          ],
          "methods": [],
          "calls": [],
          "package": "src.app",
          "path": "src/app/providers.tsx"
        }
      },
      "components": {
        "Breadcrumb.tsx": {
          "className": "Breadcrumb.tsx",
          "imports": [
            {
              "name": "react",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "lucide-react",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "next.link",
              "pkg": "next",
              "isIntrinsic": false
            }
          ],
          "methods": [],
          "calls": [
            {
              "callee": "path",
              "method": "split"
            },
            {
              "callee": "parts",
              "method": "map"
            },
            {
              "callee": "parts.slice(0, index + 1)",
              "method": "join"
            },
            {
              "callee": "parts",
              "method": "slice"
            }
          ],
          "package": "src.components",
          "path": "src/components/Breadcrumb.tsx"
        },
        "Header.tsx": {
          "className": "Header.tsx",
          "imports": [
            {
              "name": "react",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "src.components.ThemeToggle",
              "pkg": "src.components",
              "isIntrinsic": true
            }
          ],
          "methods": [],
          "calls": [
            {
              "callee": "projectPath.split(/[\\\\/]/)",
              "method": "pop"
            },
            {
              "callee": "projectPath",
              "method": "split"
            }
          ],
          "package": "src.components",
          "path": "src/components/Header.tsx"
        },
        "Loader.tsx": {
          "className": "Loader.tsx",
          "imports": [
            {
              "name": "react",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "lucide-react",
              "pkg": "",
              "isIntrinsic": false
            }
          ],
          "methods": [],
          "calls": [],
          "package": "src.components",
          "path": "src/components/Loader.tsx"
        },
        "Main.tsx": {
          "className": "Main.tsx",
          "imports": [
            {
              "name": "react",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "react",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "src.components.Settings",
              "pkg": "src.components",
              "isIntrinsic": true
            }
          ],
          "methods": [],
          "calls": [],
          "package": "src.components",
          "path": "src/components/Main.tsx"
        },
        "Setting.tsx": {
          "className": "Setting.tsx",
          "imports": [
            {
              "name": "react",
              "pkg": "",
              "isIntrinsic": false
            }
          ],
          "methods": [],
          "calls": [],
          "package": "src.components",
          "path": "src/components/Setting.tsx"
        },
        "Settings.tsx": {
          "className": "Settings.tsx",
          "imports": [
            {
              "name": "lucide-react",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "react",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "src.components.Setting",
              "pkg": "src.components",
              "isIntrinsic": true
            },
            {
              "name": "src.components.Switch",
              "pkg": "src.components",
              "isIntrinsic": true
            },
            {
              "name": "src.contexts.SettingsContext",
              "pkg": "src.contexts",
              "isIntrinsic": true
            },
            {
              "name": "src.i18n.i18n",
              "pkg": "src.i18n",
              "isIntrinsic": true
            },
            {
              "name": "radix-ui",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "src.contexts.constants",
              "pkg": "src.contexts",
              "isIntrinsic": true
            }
          ],
          "methods": [
            {
              "name": "t",
              "returnType": "void",
              "parameters": [
                ""
              ],
              "visibility": "default"
            },
            {
              "name": "t",
              "returnType": "void",
              "parameters": [
                ""
              ],
              "visibility": "default"
            },
            {
              "name": "t",
              "returnType": "void",
              "parameters": [
                ""
              ],
              "visibility": "default"
            },
            {
              "name": "t",
              "returnType": "void",
              "parameters": [
                ""
              ],
              "visibility": "default"
            },
            {
              "name": "t",
              "returnType": "void",
              "parameters": [
                ""
              ],
              "visibility": "default"
            },
            {
              "name": "t",
              "returnType": "void",
              "parameters": [
                "layout"
              ],
              "visibility": "default"
            },
            {
              "name": "t",
              "returnType": "void",
              "parameters": [
                "layout"
              ],
              "visibility": "default"
            }
          ],
          "calls": [
            {
              "callee": "v",
              "method": "toFixed"
            },
            {
              "callee": "",
              "method": "map"
            },
            {
              "callee": "v",
              "method": "toFixed"
            }
          ],
          "package": "src.components",
          "path": "src/components/Settings.tsx"
        },
        "Switch.tsx": {
          "className": "Switch.tsx",
          "imports": [
            {
              "name": "react",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "radix-ui",
              "pkg": "",
              "isIntrinsic": false
            }
          ],
          "methods": [],
          "calls": [],
          "package": "src.components",
          "path": "src/components/Switch.tsx"
        },
        "ThemeToggle.tsx": {
          "className": "ThemeToggle.tsx",
          "imports": [
            {
              "name": "react",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "next-themes",
              "pkg": "",
              "isIntrinsic": false
            }
          ],
          "methods": [],
          "calls": [],
          "package": "src.components",
          "path": "src/components/ThemeToggle.tsx"
        },
        "ZoomInput.tsx": {
          "className": "ZoomInput.tsx",
          "imports": [
            {
              "name": "react",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "react",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "cytoscape",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "lucide-react",
              "pkg": "",
              "isIntrinsic": false
            }
          ],
          "methods": [
            {
              "name": "setZoom",
              "returnType": "void",
              "parameters": [
                "parseFloat"
              ],
              "visibility": "default"
            }
          ],
          "calls": [
            {
              "callee": "cyInstance",
              "method": "zoom"
            },
            {
              "callee": "cyInstance",
              "method": "zoom"
            },
            {
              "callee": "cyInstance",
              "method": "on"
            },
            {
              "callee": "cyInstance",
              "method": "zoom"
            },
            {
              "callee": "cyInstance",
              "method": "zoom"
            },
            {
              "callee": "cyInstance",
              "method": "zoom"
            },
            {
              "callee": "{(zoom * 100)",
              "method": "toFixed"
            }
          ],
          "package": "src.components",
          "path": "src/components/ZoomInput.tsx"
        }
      },
      "contexts": {
        "SettingsContext.tsx": {
          "className": "SettingsContext.tsx",
          "imports": [
            {
              "name": "react",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "src.utils.parseEnv",
              "pkg": "src.utils",
              "isIntrinsic": true
            },
            {
              "name": "src.hooks.useLocalStorage",
              "pkg": "src.hooks",
              "isIntrinsic": true
            }
          ],
          "methods": [],
          "calls": [],
          "package": "src.contexts",
          "path": "src/contexts/SettingsContext.tsx"
        },
        "constants.ts": {
          "className": "constants",
          "imports": [
            {
              "name": "src.contexts.SettingsContext",
              "pkg": "src.contexts",
              "isIntrinsic": true
            }
          ],
          "methods": [],
          "calls": [],
          "package": "src.contexts",
          "path": "src/contexts/constants.ts"
        }
      },
      "hooks": {
        "useCytoscape.ts": {
          "className": "useCytoscape",
          "imports": [
            {
              "name": "next-themes",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "react",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "src.themes.basic.style",
              "pkg": "src.themes.basic",
              "isIntrinsic": true
            },
            {
              "name": "src.themes.basic.breadthfirst.style",
              "pkg": "src.themes.basic.breadthfirst",
              "isIntrinsic": true
            },
            {
              "name": "src.themes.basic.circle.style",
              "pkg": "src.themes.basic.circle",
              "isIntrinsic": true
            },
            {
              "name": "src.themes.basic.concentric.style",
              "pkg": "src.themes.basic.concentric",
              "isIntrinsic": true
            },
            {
              "name": "src.themes.basic.grid.style",
              "pkg": "src.themes.basic.grid",
              "isIntrinsic": true
            },
            {
              "name": "src.themes.basic.klay.style",
              "pkg": "src.themes.basic.klay",
              "isIntrinsic": true
            },
            {
              "name": "cytoscape",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "src.contexts.SettingsContext",
              "pkg": "src.contexts",
              "isIntrinsic": true
            },
            {
              "name": "src.utils.filter.filterByPackagePrefix",
              "pkg": "src.utils.filter",
              "isIntrinsic": true
            },
            {
              "name": "src.utils.filter.filterVendorPackages",
              "pkg": "src.utils.filter",
              "isIntrinsic": true
            },
            {
              "name": "src.utils.cytoscape.hasChildren",
              "pkg": "src.utils.cytoscape",
              "isIntrinsic": true
            },
            {
              "name": "src.utils.filter.filterEmptyPackages",
              "pkg": "src.utils.filter",
              "isIntrinsic": true
            },
            {
              "name": "src.themes.constants",
              "pkg": "src.themes",
              "isIntrinsic": true
            },
            {
              "name": "src.utils.filter.filterSubPackagesFromDepth",
              "pkg": "src.utils.filter",
              "isIntrinsic": true
            }
          ],
          "methods": [],
          "calls": [
            {
              "callee": "currentPackage",
              "method": "replace"
            },
            {
              "callee": "afterVendorPkgFilter.nodes",
              "method": "map"
            },
            {
              "callee": "console",
              "method": "log"
            },
            {
              "callee": "node.data.id",
              "method": "slice"
            },
            {
              "callee": "cyInstance",
              "method": "fit"
            },
            {
              "callee": "observer",
              "method": "observe"
            },
            {
              "callee": "observer",
              "method": "disconnect"
            },
            {
              "callee": "console",
              "method": "log"
            },
            {
              "callee": "cy",
              "method": "nodes"
            },
            {
              "callee": "cy",
              "method": "elements"
            },
            {
              "callee": "all",
              "method": "removeClass"
            },
            {
              "callee": "selectedNodes",
              "method": "empty"
            },
            {
              "callee": "selectedNodes",
              "method": "union"
            },
            {
              "callee": "selectedNodes",
              "method": "neighborhood"
            },
            {
              "callee": "all.difference(keep)",
              "method": "addClass"
            },
            {
              "callee": "all",
              "method": "difference"
            },
            {
              "callee": "selectedNodes",
              "method": "addClass"
            },
            {
              "callee": "selectedNodes.outgoers()",
              "method": "addClass"
            },
            {
              "callee": "selectedNodes",
              "method": "outgoers"
            },
            {
              "callee": "selectedNodes.incomers()",
              "method": "addClass"
            },
            {
              "callee": "selectedNodes",
              "method": "incomers"
            },
            {
              "callee": "cy",
              "method": "on"
            },
            {
              "callee": "cy",
              "method": "ready"
            },
            {
              "callee": "cy.nodes()\n        .filter(node => !!(node.data as NodeDataDefinition).isParent)",
              "method": "addClass"
            },
            {
              "callee": "cy.nodes()",
              "method": "filter"
            },
            {
              "callee": "cy",
              "method": "nodes"
            },
            {
              "callee": "cy",
              "method": "on"
            },
            {
              "callee": "filteredElements.nodes",
              "method": "find"
            },
            {
              "callee": "node",
              "method": "data"
            },
            {
              "callee": "cy.elements()\n        .subtract(node.outgoers())\n        .subtract(node.incomers())\n        .subtract(node)",
              "method": "addClass"
            },
            {
              "callee": "cy.elements()\n        .subtract(node.outgoers())\n        .subtract(node.incomers())",
              "method": "subtract"
            },
            {
              "callee": "cy.elements()\n        .subtract(node.outgoers())",
              "method": "subtract"
            },
            {
              "callee": "cy.elements()",
              "method": "subtract"
            },
            {
              "callee": "cy",
              "method": "elements"
            },
            {
              "callee": "node",
              "method": "outgoers"
            },
            {
              "callee": "node",
              "method": "incomers"
            },
            {
              "callee": "node",
              "method": "addClass"
            },
            {
              "callee": "node.outgoers()",
              "method": "addClass"
            },
            {
              "callee": "node",
              "method": "outgoers"
            },
            {
              "callee": "node.incomers()",
              "method": "addClass"
            },
            {
              "callee": "node",
              "method": "incomers"
            },
            {
              "callee": "cy",
              "method": "on"
            },
            {
              "callee": "cy",
              "method": "on"
            },
            {
              "callee": "edge",
              "method": "addClass"
            },
            {
              "callee": "edge.source()",
              "method": "addClass"
            },
            {
              "callee": "edge",
              "method": "source"
            },
            {
              "callee": "edge.target()",
              "method": "addClass"
            },
            {
              "callee": "edge",
              "method": "target"
            },
            {
              "callee": "cy",
              "method": "on"
            },
            {
              "callee": "edge",
              "method": "removeClass"
            },
            {
              "callee": "edge.source()",
              "method": "removeClass"
            },
            {
              "callee": "edge",
              "method": "source"
            },
            {
              "callee": "edge.target()",
              "method": "removeClass"
            },
            {
              "callee": "edge",
              "method": "target"
            },
            {
              "callee": "cy.nodes()",
              "method": "forEach"
            },
            {
              "callee": "cy",
              "method": "nodes"
            },
            {
              "callee": "filteredElements.nodes",
              "method": "find"
            },
            {
              "callee": "node",
              "method": "data"
            },
            {
              "callee": "node",
              "method": "addClass"
            },
            {
              "callee": "node",
              "method": "on"
            },
            {
              "callee": "node.id()",
              "method": "replace"
            },
            {
              "callee": "node",
              "method": "id"
            },
            {
              "callee": "cy",
              "method": "destroy"
            },
            {
              "callee": "cyInstance.style([...getCommonStyle(filteredElements, theme)])",
              "method": "update"
            },
            {
              "callee": "cyInstance",
              "method": "style"
            }
          ],
          "package": "src.hooks",
          "path": "src/hooks/useCytoscape.ts"
        },
        "useLocalStorage.ts": {
          "className": "useLocalStorage",
          "imports": [
            {
              "name": "react",
              "pkg": "",
              "isIntrinsic": false
            }
          ],
          "methods": [],
          "calls": [
            {
              "callee": "window.localStorage",
              "method": "getItem"
            },
            {
              "callee": "JSON",
              "method": "parse"
            },
            {
              "callee": "console",
              "method": "warn"
            },
            {
              "callee": "window.localStorage",
              "method": "setItem"
            },
            {
              "callee": "JSON",
              "method": "stringify"
            },
            {
              "callee": "console",
              "method": "warn"
            }
          ],
          "package": "src.hooks",
          "path": "src/hooks/useLocalStorage.ts"
        }
      },
      "i18n": {
        "en.ts": {
          "className": "en",
          "imports": [
            {
              "name": "src.i18n.i18n",
              "pkg": "src.i18n",
              "isIntrinsic": true
            }
          ],
          "methods": [],
          "calls": [],
          "package": "src.i18n",
          "path": "src/i18n/en.ts"
        },
        "i18n.ts": {
          "className": "i18n",
          "imports": [
            {
              "name": "src.i18n.en",
              "pkg": "src.i18n",
              "isIntrinsic": true
            }
          ],
          "methods": [],
          "calls": [],
          "package": "src.i18n",
          "path": "src/i18n/i18n.ts"
        }
      },
      "themes": {
        "basic": {
          "breadthfirst": {
            "layout.ts": {
              "className": "layout",
              "imports": [
                {
                  "name": "cytoscape",
                  "pkg": "",
                  "isIntrinsic": false
                }
              ],
              "methods": [],
              "calls": [],
              "package": "src.themes.basic.breadthfirst",
              "path": "src/themes/basic/breadthfirst/layout.ts"
            },
            "style.ts": {
              "className": "style",
              "imports": [
                {
                  "name": "cytoscape",
                  "pkg": "",
                  "isIntrinsic": false
                }
              ],
              "methods": [],
              "calls": [],
              "package": "src.themes.basic.breadthfirst",
              "path": "src/themes/basic/breadthfirst/style.ts"
            }
          },
          "circle": {
            "layout.ts": {
              "className": "layout",
              "imports": [
                {
                  "name": "cytoscape",
                  "pkg": "",
                  "isIntrinsic": false
                }
              ],
              "methods": [],
              "calls": [
                {
                  "callee": "a.data('id')",
                  "method": "localeCompare"
                },
                {
                  "callee": "a",
                  "method": "data"
                },
                {
                  "callee": "b",
                  "method": "data"
                }
              ],
              "package": "src.themes.basic.circle",
              "path": "src/themes/basic/circle/layout.ts"
            },
            "style.ts": {
              "className": "style",
              "imports": [
                {
                  "name": "cytoscape",
                  "pkg": "",
                  "isIntrinsic": false
                }
              ],
              "methods": [],
              "calls": [],
              "package": "src.themes.basic.circle",
              "path": "src/themes/basic/circle/style.ts"
            }
          },
          "concentric": {
            "layout.ts": {
              "className": "layout",
              "imports": [
                {
                  "name": "cytoscape",
                  "pkg": "",
                  "isIntrinsic": false
                }
              ],
              "methods": [],
              "calls": [],
              "package": "src.themes.basic.concentric",
              "path": "src/themes/basic/concentric/layout.ts"
            },
            "style.ts": {
              "className": "style",
              "imports": [
                {
                  "name": "cytoscape",
                  "pkg": "",
                  "isIntrinsic": false
                }
              ],
              "methods": [],
              "calls": [],
              "package": "src.themes.basic.concentric",
              "path": "src/themes/basic/concentric/style.ts"
            }
          },
          "grid": {
            "layout.ts": {
              "className": "layout",
              "imports": [
                {
                  "name": "cytoscape",
                  "pkg": "",
                  "isIntrinsic": false
                }
              ],
              "methods": [],
              "calls": [
                {
                  "callee": "a.data('id')",
                  "method": "localeCompare"
                },
                {
                  "callee": "a",
                  "method": "data"
                },
                {
                  "callee": "b",
                  "method": "data"
                }
              ],
              "package": "src.themes.basic.grid",
              "path": "src/themes/basic/grid/layout.ts"
            },
            "style.ts": {
              "className": "style",
              "imports": [
                {
                  "name": "cytoscape",
                  "pkg": "",
                  "isIntrinsic": false
                }
              ],
              "methods": [],
              "calls": [],
              "package": "src.themes.basic.grid",
              "path": "src/themes/basic/grid/style.ts"
            }
          },
          "klay": {
            "layout.ts": {
              "className": "layout",
              "imports": [
                {
                  "name": "cytoscape",
                  "pkg": "",
                  "isIntrinsic": false
                },
                {
                  "name": "cytoscape-klay",
                  "pkg": "",
                  "isIntrinsic": false
                },
                {
                  "name": "cytoscape-klay",
                  "pkg": "",
                  "isIntrinsic": false
                }
              ],
              "methods": [],
              "calls": [
                {
                  "callee": "cytoscape",
                  "method": "use"
                }
              ],
              "package": "src.themes.basic.klay",
              "path": "src/themes/basic/klay/layout.ts"
            },
            "style.ts": {
              "className": "style",
              "imports": [
                {
                  "name": "cytoscape",
                  "pkg": "",
                  "isIntrinsic": false
                }
              ],
              "methods": [],
              "calls": [],
              "package": "src.themes.basic.klay",
              "path": "src/themes/basic/klay/style.ts"
            }
          },
          "style.ts": {
            "className": "style",
            "imports": [
              {
                "name": "src.utils.cytoscape.getWeightBuckets",
                "pkg": "src.utils.cytoscape",
                "isIntrinsic": true
              },
              {
                "name": "cytoscape",
                "pkg": "",
                "isIntrinsic": false
              }
            ],
            "methods": [],
            "calls": [],
            "package": "src.themes.basic",
            "path": "src/themes/basic/style.ts"
          }
        },
        "constants.ts": {
          "className": "constants",
          "imports": [
            {
              "name": "cytoscape",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "src.contexts.SettingsContext",
              "pkg": "src.contexts",
              "isIntrinsic": true
            },
            {
              "name": "src.themes.basic.breadthfirst.layout",
              "pkg": "src.themes.basic.breadthfirst",
              "isIntrinsic": true
            },
            {
              "name": "src.themes.basic.circle.layout",
              "pkg": "src.themes.basic.circle",
              "isIntrinsic": true
            },
            {
              "name": "src.themes.basic.concentric.layout",
              "pkg": "src.themes.basic.concentric",
              "isIntrinsic": true
            },
            {
              "name": "src.themes.basic.grid.layout",
              "pkg": "src.themes.basic.grid",
              "isIntrinsic": true
            },
            {
              "name": "src.themes.basic.klay.layout",
              "pkg": "src.themes.basic.klay",
              "isIntrinsic": true
            }
          ],
          "methods": [],
          "calls": [],
          "package": "src.themes",
          "path": "src/themes/constants.ts"
        },
        "getLayoutStyle.ts": {
          "className": "getLayoutStyle",
          "imports": [
            {
              "name": "src.contexts.SettingsContext",
              "pkg": "src.contexts",
              "isIntrinsic": true
            },
            {
              "name": "src.themes.basic.breadthfirst.style",
              "pkg": "src.themes.basic.breadthfirst",
              "isIntrinsic": true
            },
            {
              "name": "src.themes.basic.circle.style",
              "pkg": "src.themes.basic.circle",
              "isIntrinsic": true
            },
            {
              "name": "src.themes.basic.concentric.style",
              "pkg": "src.themes.basic.concentric",
              "isIntrinsic": true
            },
            {
              "name": "src.themes.basic.grid.style",
              "pkg": "src.themes.basic.grid",
              "isIntrinsic": true
            },
            {
              "name": "src.themes.basic.klay.style",
              "pkg": "src.themes.basic.klay",
              "isIntrinsic": true
            }
          ],
          "methods": [],
          "calls": [],
          "package": "src.themes",
          "path": "src/themes/getLayoutStyle.ts"
        },
        "types.ts": {
          "className": "types",
          "imports": [],
          "methods": [],
          "calls": [],
          "package": "src.themes",
          "path": "src/themes/types.ts"
        }
      },
      "types": {
        "types.ts": {
          "className": "types",
          "imports": [
            {
              "name": "cytoscape",
              "pkg": "",
              "isIntrinsic": false
            }
          ],
          "methods": [],
          "calls": [],
          "package": "src.types",
          "path": "src/types/types.ts"
        }
      },
      "utils": {
        "cytoscape": {
          "buildGraph.ts": {
            "className": "buildGraph",
            "imports": [
              {
                "name": "cytoscape",
                "pkg": "",
                "isIntrinsic": false
              },
              {
                "name": "src.types.types",
                "pkg": "src.types",
                "isIntrinsic": true
              }
            ],
            "methods": [],
            "calls": [
              {
                "callee": "Object.keys(currentDir)",
                "method": "forEach"
              },
              {
                "callee": "Object",
                "method": "keys"
              },
              {
                "callee": "nodes",
                "method": "push"
              },
              {
                "callee": "(dirOrFile as IFile).imports",
                "method": "map"
              },
              {
                "callee": "console",
                "method": "log"
              },
              {
                "callee": "targets",
                "method": "join"
              },
              {
                "callee": "targets",
                "method": "forEach"
              },
              {
                "callee": "edges",
                "method": "get"
              },
              {
                "callee": "edges",
                "method": "get"
              },
              {
                "callee": "edges",
                "method": "set"
              },
              {
                "callee": "rawElements.edges",
                "method": "forEach"
              },
              {
                "callee": "[source, target]",
                "method": "forEach"
              },
              {
                "callee": "rawElements.nodes",
                "method": "find"
              },
              {
                "callee": "rawElements.nodes",
                "method": "push"
              },
              {
                "callee": "Array",
                "method": "from"
              },
              {
                "callee": "rawElements.edges",
                "method": "values"
              }
            ],
            "package": "src.utils.cytoscape",
            "path": "src/utils/cytoscape/buildGraph.ts"
          },
          "getMaxEdgeWeight.ts": {
            "className": "getMaxEdgeWeight",
            "imports": [
              {
                "name": "cytoscape",
                "pkg": "",
                "isIntrinsic": false
              }
            ],
            "methods": [],
            "calls": [
              {
                "callee": "filteredElements?.edges",
                "method": "reduce"
              }
            ],
            "package": "src.utils.cytoscape",
            "path": "src/utils/cytoscape/getMaxEdgeWeight.ts"
          },
          "getWeightBuckets.ts": {
            "className": "getWeightBuckets",
            "imports": [
              {
                "name": "cytoscape",
                "pkg": "",
                "isIntrinsic": false
              },
              {
                "name": "src.utils.cytoscape.getMaxEdgeWeight",
                "pkg": "src.utils.cytoscape",
                "isIntrinsic": true
              }
            ],
            "methods": [],
            "calls": [
              {
                "callee": "filteredElements.edges",
                "method": "map"
              },
              {
                "callee": "new Array(categoryCount)",
                "method": "fill"
              },
              {
                "callee": "thresholds",
                "method": "push"
              },
              {
                "callee": "thresholds",
                "method": "push"
              },
              {
                "callee": "Math",
                "method": "log"
              },
              {
                "callee": "thresholds",
                "method": "push"
              },
              {
                "callee": "Math",
                "method": "exp"
              },
              {
                "callee": "thresholds",
                "method": "push"
              },
              {
                "callee": "[...weights]",
                "method": "sort"
              },
              {
                "callee": "Math",
                "method": "floor"
              },
              {
                "callee": "thresholds",
                "method": "push"
              },
              {
                "callee": "thresholds",
                "method": "push"
              },
              {
                "callee": "weights",
                "method": "forEach"
              },
              {
                "callee": "thresholds",
                "method": "map"
              }
            ],
            "package": "src.utils.cytoscape",
            "path": "src/utils/cytoscape/getWeightBuckets.ts"
          },
          "hasChildren.ts": {
            "className": "hasChildren",
            "imports": [
              {
                "name": "cytoscape",
                "pkg": "",
                "isIntrinsic": false
              }
            ],
            "methods": [],
            "calls": [
              {
                "callee": "nodes",
                "method": "some"
              },
              {
                "callee": "n.data.id",
                "method": "startsWith"
              }
            ],
            "package": "src.utils.cytoscape",
            "path": "src/utils/cytoscape/hasChildren.ts"
          },
          "rules": {
            "markCyclicPackages.ts": {
              "className": "markCyclicPackages",
              "imports": [
                {
                  "name": "cytoscape",
                  "pkg": "",
                  "isIntrinsic": false
                },
                {
                  "name": "src.types.types",
                  "pkg": "src.types",
                  "isIntrinsic": true
                }
              ],
              "methods": [],
              "calls": [
                {
                  "callee": "files",
                  "method": "push"
                },
                {
                  "callee": "graph",
                  "method": "has"
                },
                {
                  "callee": "graph",
                  "method": "set"
                },
                {
                  "callee": "graph.get(fromPkg)!",
                  "method": "add"
                },
                {
                  "callee": "graph",
                  "method": "get"
                },
                {
                  "callee": "indexes",
                  "method": "set"
                },
                {
                  "callee": "lowlinks",
                  "method": "set"
                },
                {
                  "callee": "stack",
                  "method": "push"
                },
                {
                  "callee": "onStack",
                  "method": "add"
                },
                {
                  "callee": "graph",
                  "method": "get"
                },
                {
                  "callee": "indexes",
                  "method": "has"
                },
                {
                  "callee": "lowlinks",
                  "method": "set"
                },
                {
                  "callee": "Math",
                  "method": "min"
                },
                {
                  "callee": "lowlinks",
                  "method": "get"
                },
                {
                  "callee": "lowlinks",
                  "method": "get"
                },
                {
                  "callee": "onStack",
                  "method": "has"
                },
                {
                  "callee": "lowlinks",
                  "method": "set"
                },
                {
                  "callee": "Math",
                  "method": "min"
                },
                {
                  "callee": "lowlinks",
                  "method": "get"
                },
                {
                  "callee": "indexes",
                  "method": "get"
                },
                {
                  "callee": "lowlinks",
                  "method": "get"
                },
                {
                  "callee": "indexes",
                  "method": "get"
                },
                {
                  "callee": "stack",
                  "method": "pop"
                },
                {
                  "callee": "onStack",
                  "method": "delete"
                },
                {
                  "callee": "scc",
                  "method": "push"
                },
                {
                  "callee": "graph.get(scc[0])",
                  "method": "has"
                },
                {
                  "callee": "graph",
                  "method": "get"
                },
                {
                  "callee": "sccs",
                  "method": "push"
                },
                {
                  "callee": "graph",
                  "method": "keys"
                },
                {
                  "callee": "indexes",
                  "method": "has"
                },
                {
                  "callee": "sccs",
                  "method": "flat"
                },
                {
                  "callee": "elements.nodes",
                  "method": "map"
                },
                {
                  "callee": "cyclicPackages",
                  "method": "has"
                }
              ],
              "package": "src.utils.cytoscape.rules",
              "path": "src/utils/cytoscape/rules/markCyclicPackages.ts"
            }
          }
        },
        "detectLanguage.ts": {
          "className": "detectLanguage",
          "imports": [
            {
              "name": "fs",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "path",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "src.utils.detectLanguage.types",
              "pkg": "src.utils",
              "isIntrinsic": true
            }
          ],
          "methods": [],
          "calls": [
            {
              "callee": "fs",
              "method": "existsSync"
            },
            {
              "callee": "fs.statSync(directoryPath)",
              "method": "isDirectory"
            },
            {
              "callee": "fs",
              "method": "statSync"
            },
            {
              "callee": "fs",
              "method": "readdirSync"
            },
            {
              "callee": "files",
              "method": "includes"
            },
            {
              "callee": "files",
              "method": "includes"
            },
            {
              "callee": "indicators[ELanguage.JavaScript]",
              "method": "push"
            },
            {
              "callee": "files",
              "method": "some"
            },
            {
              "callee": "file",
              "method": "endsWith"
            },
            {
              "callee": "file",
              "method": "endsWith"
            },
            {
              "callee": "indicators[ELanguage.JavaScript]",
              "method": "push"
            },
            {
              "callee": "files",
              "method": "includes"
            },
            {
              "callee": "indicators[ELanguage.JavaScript]",
              "method": "push"
            },
            {
              "callee": "files",
              "method": "includes"
            },
            {
              "callee": "indicators[ELanguage.TypeScript]",
              "method": "push"
            },
            {
              "callee": "files",
              "method": "some"
            },
            {
              "callee": "file",
              "method": "endsWith"
            },
            {
              "callee": "file",
              "method": "endsWith"
            },
            {
              "callee": "indicators[ELanguage.TypeScript]",
              "method": "push"
            },
            {
              "callee": "files",
              "method": "includes"
            },
            {
              "callee": "JSON",
              "method": "parse"
            },
            {
              "callee": "fs",
              "method": "readFileSync"
            },
            {
              "callee": "path",
              "method": "join"
            },
            {
              "callee": "indicators[ELanguage.TypeScript]",
              "method": "push"
            },
            {
              "callee": "console",
              "method": "error"
            },
            {
              "callee": "files",
              "method": "includes"
            },
            {
              "callee": "indicators[ELanguage.Java]",
              "method": "push"
            },
            {
              "callee": "files",
              "method": "includes"
            },
            {
              "callee": "files",
              "method": "includes"
            },
            {
              "callee": "indicators[ELanguage.Java]",
              "method": "push"
            },
            {
              "callee": "files",
              "method": "some"
            },
            {
              "callee": "file",
              "method": "endsWith"
            },
            {
              "callee": "indicators[ELanguage.Java]",
              "method": "push"
            },
            {
              "callee": "files",
              "method": "includes"
            },
            {
              "callee": "files",
              "method": "includes"
            },
            {
              "callee": "files",
              "method": "includes"
            },
            {
              "callee": "indicators[ELanguage.Java]",
              "method": "push"
            },
            {
              "callee": "Object",
              "method": "entries"
            },
            {
              "callee": "Object.values(counts)",
              "method": "reduce"
            },
            {
              "callee": "Object",
              "method": "values"
            },
            {
              "callee": "fs",
              "method": "readdirSync"
            },
            {
              "callee": "files",
              "method": "includes"
            },
            {
              "callee": "files",
              "method": "includes"
            },
            {
              "callee": "fs",
              "method": "readdirSync"
            },
            {
              "callee": "files",
              "method": "includes"
            },
            {
              "callee": "files",
              "method": "includes"
            },
            {
              "callee": "fs",
              "method": "readdirSync"
            },
            {
              "callee": "files",
              "method": "includes"
            },
            {
              "callee": "files",
              "method": "some"
            },
            {
              "callee": "file",
              "method": "endsWith"
            },
            {
              "callee": "files",
              "method": "includes"
            },
            {
              "callee": "files",
              "method": "includes"
            }
          ],
          "package": "src.utils",
          "path": "src/utils/detectLanguage.ts"
        },
        "detectLanguage.types.ts": {
          "className": "detectLanguage.types",
          "imports": [],
          "methods": [],
          "calls": [],
          "package": "src.utils",
          "path": "src/utils/detectLanguage.types.ts"
        },
        "filter": {
          "filterByPackagePrefix.ts": {
            "className": "filterByPackagePrefix",
            "imports": [],
            "methods": [],
            "calls": [
              {
                "callee": "packagePrefix",
                "method": "endsWith"
              },
              {
                "callee": "allElements.nodes",
                "method": "filter"
              },
              {
                "callee": "(node.data.id as string)",
                "method": "startsWith"
              },
              {
                "callee": "allowedNodes",
                "method": "map"
              },
              {
                "callee": "allElements.edges",
                "method": "filter"
              },
              {
                "callee": "allowedNodeIds",
                "method": "has"
              },
              {
                "callee": "allowedNodeIds",
                "method": "has"
              }
            ],
            "package": "src.utils.filter",
            "path": "src/utils/filter/filterByPackagePrefix.ts"
          },
          "filterEmptyPackages.ts": {
            "className": "filterEmptyPackages",
            "imports": [
              {
                "name": "cytoscape",
                "pkg": "",
                "isIntrinsic": false
              }
            ],
            "methods": [],
            "calls": [
              {
                "callee": "elements.nodes",
                "method": "filter"
              },
              {
                "callee": "n.data.id",
                "method": "includes"
              },
              {
                "callee": "elements.nodes",
                "method": "map"
              },
              {
                "callee": "nodes",
                "method": "filter"
              },
              {
                "callee": "id",
                "method": "startsWith"
              },
              {
                "callee": "id",
                "method": "split"
              },
              {
                "callee": "currentPackage",
                "method": "split"
              }
            ],
            "package": "src.utils.filter",
            "path": "src/utils/filter/filterEmptyPackages.ts"
          },
          "filterSubPackages.ts": {
            "className": "filterSubPackages",
            "imports": [
              {
                "name": "cytoscape",
                "pkg": "",
                "isIntrinsic": false
              }
            ],
            "methods": [],
            "calls": [
              {
                "callee": "[...packages]",
                "method": "sort"
              },
              {
                "callee": "result",
                "method": "some"
              },
              {
                "callee": "pkg",
                "method": "startsWith"
              },
              {
                "callee": "result",
                "method": "push"
              },
              {
                "callee": "elements.nodes",
                "method": "map"
              },
              {
                "callee": "topLevelSet",
                "method": "has"
              },
              {
                "callee": "packageToAncestor",
                "method": "set"
              },
              {
                "callee": "pkg",
                "method": "split"
              },
              {
                "callee": "parts",
                "method": "pop"
              },
              {
                "callee": "parts",
                "method": "join"
              },
              {
                "callee": "topLevelSet",
                "method": "has"
              },
              {
                "callee": "packageToAncestor",
                "method": "set"
              },
              {
                "callee": "elements.nodes",
                "method": "filter"
              },
              {
                "callee": "topLevelSet",
                "method": "has"
              },
              {
                "callee": "filteredNodes",
                "method": "map"
              },
              {
                "callee": "packageToAncestor",
                "method": "get"
              },
              {
                "callee": "packageToAncestor",
                "method": "get"
              },
              {
                "callee": "visibleNodeIds",
                "method": "has"
              },
              {
                "callee": "visibleNodeIds",
                "method": "has"
              },
              {
                "callee": "edgeMap",
                "method": "has"
              },
              {
                "callee": "edgeMap",
                "method": "set"
              },
              {
                "callee": "edgeMap",
                "method": "get"
              },
              {
                "callee": "Array",
                "method": "from"
              },
              {
                "callee": "edgeMap",
                "method": "values"
              }
            ],
            "package": "src.utils.filter",
            "path": "src/utils/filter/filterSubPackages.ts"
          },
          "filterSubPackagesFromDepth.ts": {
            "className": "filterSubPackagesFromDepth",
            "imports": [
              {
                "name": "cytoscape",
                "pkg": "",
                "isIntrinsic": false
              }
            ],
            "methods": [],
            "calls": [
              {
                "callee": "[...packages]",
                "method": "sort"
              },
              {
                "callee": "roots",
                "method": "some"
              },
              {
                "callee": "pkg",
                "method": "startsWith"
              },
              {
                "callee": "roots",
                "method": "push"
              },
              {
                "callee": "roots",
                "method": "has"
              },
              {
                "callee": "pkg",
                "method": "split"
              },
              {
                "callee": "parts",
                "method": "pop"
              },
              {
                "callee": "parts",
                "method": "join"
              },
              {
                "callee": "roots",
                "method": "has"
              },
              {
                "callee": "root",
                "method": "split"
              },
              {
                "callee": "pkg",
                "method": "split"
              },
              {
                "callee": "Math",
                "method": "min"
              },
              {
                "callee": "pkgParts.slice(0, d)",
                "method": "join"
              },
              {
                "callee": "pkgParts",
                "method": "slice"
              },
              {
                "callee": "existing",
                "method": "has"
              },
              {
                "callee": "elements.nodes",
                "method": "map"
              },
              {
                "callee": "pkg",
                "method": "split"
              },
              {
                "callee": "root",
                "method": "split"
              },
              {
                "callee": "elements.nodes",
                "method": "map"
              },
              {
                "callee": "Object",
                "method": "fromEntries"
              },
              {
                "callee": "roots",
                "method": "map"
              },
              {
                "callee": "pkg",
                "method": "split"
              },
              {
                "callee": "root",
                "method": "split"
              },
              {
                "callee": "elements.nodes",
                "method": "map"
              },
              {
                "callee": "pkgToVisible",
                "method": "set"
              },
              {
                "callee": "pkgToVisible",
                "method": "values"
              },
              {
                "callee": "elements.nodes",
                "method": "filter"
              },
              {
                "callee": "visibleNodeIds",
                "method": "has"
              },
              {
                "callee": "pkgToVisible",
                "method": "get"
              },
              {
                "callee": "pkgToVisible",
                "method": "get"
              },
              {
                "callee": "visibleNodeIds",
                "method": "has"
              },
              {
                "callee": "visibleNodeIds",
                "method": "has"
              },
              {
                "callee": "edgeMap",
                "method": "has"
              },
              {
                "callee": "edgeMap",
                "method": "set"
              },
              {
                "callee": "edgeMap",
                "method": "get"
              },
              {
                "callee": "Array",
                "method": "from"
              },
              {
                "callee": "edgeMap",
                "method": "values"
              }
            ],
            "package": "src.utils.filter",
            "path": "src/utils/filter/filterSubPackagesFromDepth.ts"
          },
          "filterVendorPackages.ts": {
            "className": "filterVendorPackages",
            "imports": [
              {
                "name": "cytoscape",
                "pkg": "",
                "isIntrinsic": false
              }
            ],
            "methods": [],
            "calls": [
              {
                "callee": "elements.nodes",
                "method": "filter"
              },
              {
                "callee": "filteredNodes",
                "method": "map"
              },
              {
                "callee": "elements.edges",
                "method": "filter"
              },
              {
                "callee": "allowedNodeIds",
                "method": "has"
              },
              {
                "callee": "allowedNodeIds",
                "method": "has"
              }
            ],
            "package": "src.utils.filter",
            "path": "src/utils/filter/filterVendorPackages.ts"
          }
        },
        "getAudit.ts": {
          "className": "getAudit",
          "imports": [
            {
              "name": "src.utils.getParsedFileStructure",
              "pkg": "src.utils",
              "isIntrinsic": true
            },
            {
              "name": "src.utils.detectLanguage",
              "pkg": "src.utils",
              "isIntrinsic": true
            },
            {
              "name": "src.utils.detectLanguage.types",
              "pkg": "src.utils",
              "isIntrinsic": true
            },
            {
              "name": "src.types.types",
              "pkg": "src.types",
              "isIntrinsic": true
            },
            {
              "name": "src.utils.cytoscape.rules.markCyclicPackages",
              "pkg": "src.utils.cytoscape.rules",
              "isIntrinsic": true
            }
          ],
          "methods": [],
          "calls": [
            {
              "callee": "projectPath.split('/')",
              "method": "pop"
            },
            {
              "callee": "projectPath",
              "method": "split"
            },
            {
              "callee": "Date",
              "method": "now"
            },
            {
              "callee": "Array",
              "method": "from"
            },
            {
              "callee": "Date",
              "method": "now"
            }
          ],
          "package": "src.utils",
          "path": "src/utils/getAudit.ts"
        },
        "getJson.ts": {
          "className": "getJson",
          "imports": [],
          "methods": [],
          "calls": [
            {
              "callee": "res",
              "method": "json"
            }
          ],
          "package": "src.utils",
          "path": "src/utils/getJson.ts"
        },
        "getParsedFileStructure.ts": {
          "className": "getParsedFileStructure",
          "imports": [
            {
              "name": "node:fs",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "node:path",
              "pkg": "",
              "isIntrinsic": false
            },
            {
              "name": "src.utils.detectLanguage",
              "pkg": "src.utils",
              "isIntrinsic": true
            },
            {
              "name": "src.utils.java.parseJavaFile",
              "pkg": "src.utils.java",
              "isIntrinsic": true
            },
            {
              "name": "src.utils.typescript.parseFile",
              "pkg": "src.utils.typescript",
              "isIntrinsic": true
            },
            {
              "name": "src.utils.detectLanguage.types",
              "pkg": "src.utils",
              "isIntrinsic": true
            },
            {
              "name": "src.types.types",
              "pkg": "src.types",
              "isIntrinsic": true
            }
          ],
          "methods": [],
          "calls": [
            {
              "callee": "ignores",
              "method": "includes"
            },
            {
              "callee": "entry",
              "method": "isDirectory"
            },
            {
              "callee": "entry",
              "method": "isFile"
            },
            {
              "callee": "entry.name",
              "method": "endsWith"
            },
            {
              "callee": "entry",
              "method": "isDirectory"
            },
            {
              "callee": "entry",
              "method": "isFile"
            },
            {
              "callee": "entry.name",
              "method": "endsWith"
            },
            {
              "callee": "entry.name",
              "method": "endsWith"
            },
            {
              "callee": "console",
              "method": "log"
            },
            {
              "callee": "[ELanguage.Java, ELanguage.TypeScript]",
              "method": "includes"
            },
            {
              "callee": "console",
              "method": "log"
            }
          ],
          "package": "src.utils",
          "path": "src/utils/getParsedFileStructure.ts"
        },
        "java": {
          "extractJavaPackageFromImport.ts": {
            "className": "extractJavaPackageFromImport",
            "imports": [],
            "methods": [],
            "calls": [
              {
                "callee": "/^[A-Z]/",
                "method": "test"
              },
              {
                "callee": "pkgSegments",
                "method": "push"
              },
              {
                "callee": "pkgSegments.reverse()",
                "method": "join"
              },
              {
                "callee": "pkgSegments",
                "method": "reverse"
              },
              {
                "callee": "imp",
                "method": "replace"
              },
              {
                "callee": "cleaned.split('.')",
                "method": "reverse"
              },
              {
                "callee": "cleaned",
                "method": "split"
              },
              {
                "callee": "segments[0]",
                "method": "toLowerCase"
              }
            ],
            "package": "src.utils.java",
            "path": "src/utils/java/extractJavaPackageFromImport.ts"
          },
          "findEntryPoint.ts": {
            "className": "findEntryPoint",
            "imports": [
              {
                "name": "src.utils.java.parseJavaFile",
                "pkg": "src.utils.java",
                "isIntrinsic": true
              }
            ],
            "methods": [],
            "calls": [
              {
                "callee": "file.methods",
                "method": "find"
              },
              {
                "callee": "m.parameters[0]",
                "method": "includes"
              }
            ],
            "package": "src.utils.java",
            "path": "src/utils/java/findEntryPoint.ts"
          },
          "getIntrinsicPackagesRecursive.ts": {
            "className": "getIntrinsicPackagesRecursive",
            "imports": [
              {
                "name": "fs",
                "pkg": "",
                "isIntrinsic": false
              },
              {
                "name": "path",
                "pkg": "",
                "isIntrinsic": false
              }
            ],
            "methods": [],
            "calls": [
              {
                "callee": "entries",
                "method": "filter"
              },
              {
                "callee": "e",
                "method": "isDirectory"
              },
              {
                "callee": "entries",
                "method": "filter"
              },
              {
                "callee": "e",
                "method": "isFile"
              },
              {
                "callee": "e.name",
                "method": "endsWith"
              },
              {
                "callee": "relative(basePath, dirPath)",
                "method": "replace"
              },
              {
                "callee": "results",
                "method": "push"
              }
            ],
            "package": "src.utils.java",
            "path": "src/utils/java/getIntrinsicPackagesRecursive.ts"
          },
          "parseJavaFile.ts": {
            "className": "name",
            "imports": [
              {
                "name": "fs",
                "pkg": "",
                "isIntrinsic": false
              },
              {
                "name": "path",
                "pkg": "",
                "isIntrinsic": false
              },
              {
                "name": "src.utils.java.getIntrinsicPackagesRecursive",
                "pkg": "src.utils.java",
                "isIntrinsic": true
              },
              {
                "name": "src.utils.java.extractJavaPackageFromImport",
                "pkg": "src.utils.java",
                "isIntrinsic": true
              },
              {
                "name": "src.types.types",
                "pkg": "src.types",
                "isIntrinsic": true
              }
            ],
            "methods": [],
            "calls": [
              {
                "callee": "content",
                "method": "match"
              },
              {
                "callee": "Array.from(content.matchAll(/^import\\s+([a-zA-Z0-9_.*]+);/gm))",
                "method": "map"
              },
              {
                "callee": "Array",
                "method": "from"
              },
              {
                "callee": "content",
                "method": "matchAll"
              },
              {
                "callee": "content",
                "method": "match"
              },
              {
                "callee": "content",
                "method": "match"
              },
              {
                "callee": "methodRegex",
                "method": "exec"
              },
              {
                "callee": "match[4]\n      .split(',')\n      .map(p => p.trim())",
                "method": "filter"
              },
              {
                "callee": "match[4]\n      .split(',')",
                "method": "map"
              },
              {
                "callee": "match[4]",
                "method": "split"
              },
              {
                "callee": "p",
                "method": "trim"
              },
              {
                "callee": "methods",
                "method": "push"
              },
              {
                "callee": "callRegex",
                "method": "exec"
              },
              {
                "callee": "calls",
                "method": "push"
              },
              {
                "callee": "fs",
                "method": "readFileSync"
              },
              {
                "callee": "path",
                "method": "basename"
              },
              {
                "callee": "extractImports(content)",
                "method": "map"
              },
              {
                "callee": "intrinsicPackages",
                "method": "includes"
              },
              {
                "callee": "path",
                "method": "relative"
              }
            ],
            "package": "src.utils.java",
            "path": "src/utils/java/parseJavaFile.ts"
          }
        },
        "parseEnv.ts": {
          "className": "parseEnv",
          "imports": [],
          "methods": [],
          "calls": [],
          "package": "src.utils",
          "path": "src/utils/parseEnv.ts"
        },
        "typescript": {
          "extractTypeScriptPackageFromImport.ts": {
            "className": "extractTypeScriptPackageFromImport",
            "imports": [],
            "methods": [],
            "calls": [
              {
                "callee": "console",
                "method": "log"
              },
              {
                "callee": "imp",
                "method": "split"
              },
              {
                "callee": "segments.slice(0, -1)",
                "method": "join"
              },
              {
                "callee": "segments",
                "method": "slice"
              },
              {
                "callee": "pathSegments",
                "method": "startsWith"
              },
              {
                "callee": "pathSegments",
                "method": "replace"
              },
              {
                "callee": "replacedAlias.split('/')",
                "method": "join"
              },
              {
                "callee": "replacedAlias",
                "method": "split"
              }
            ],
            "package": "src.utils.typescript",
            "path": "src/utils/typescript/extractTypeScriptPackageFromImport.ts"
          },
          "parseFile.ts": {
            "className": "name",
            "imports": [
              {
                "name": "fs.promises",
                "pkg": "fs",
                "isIntrinsic": false
              },
              {
                "name": "path",
                "pkg": "",
                "isIntrinsic": false
              },
              {
                "name": "typescript",
                "pkg": "",
                "isIntrinsic": false
              },
              {
                "name": "src.utils.typescript.extractTypeScriptPackageFromImport",
                "pkg": "src.utils.typescript",
                "isIntrinsic": true
              },
              {
                "name": "src.types.types",
                "pkg": "src.types",
                "isIntrinsic": true
              }
            ],
            "methods": [],
            "calls": [
              {
                "callee": "ts",
                "method": "createSourceFile"
              },
              {
                "callee": "sourceFile",
                "method": "forEachChild"
              },
              {
                "callee": "ts",
                "method": "isImportDeclaration"
              },
              {
                "callee": "moduleSpecifier",
                "method": "replace"
              },
              {
                "callee": "imports",
                "method": "push"
              },
              {
                "callee": "replacedAlias.split('/')",
                "method": "join"
              },
              {
                "callee": "replacedAlias",
                "method": "split"
              },
              {
                "callee": "moduleSpecifier",
                "method": "startsWith"
              },
              {
                "callee": "content",
                "method": "match"
              },
              {
                "callee": "path",
                "method": "basename"
              },
              {
                "callee": "ts",
                "method": "createSourceFile"
              },
              {
                "callee": "ts",
                "method": "isMethodDeclaration"
              },
              {
                "callee": "node.name",
                "method": "getText"
              },
              {
                "callee": "node.type",
                "method": "getText"
              },
              {
                "callee": "node.parameters",
                "method": "map"
              },
              {
                "callee": "p",
                "method": "getText"
              },
              {
                "callee": "ts",
                "method": "getCombinedModifierFlags"
              },
              {
                "callee": "methods",
                "method": "push"
              },
              {
                "callee": "ts",
                "method": "forEachChild"
              },
              {
                "callee": "ts",
                "method": "createSourceFile"
              },
              {
                "callee": "ts",
                "method": "isCallExpression"
              },
              {
                "callee": "ts",
                "method": "isPropertyAccessExpression"
              },
              {
                "callee": "node.expression.expression",
                "method": "getText"
              },
              {
                "callee": "node.expression.name",
                "method": "getText"
              },
              {
                "callee": "calls",
                "method": "push"
              },
              {
                "callee": "ts",
                "method": "forEachChild"
              },
              {
                "callee": "fs",
                "method": "readFile"
              },
              {
                "callee": "path",
                "method": "relative"
              },
              {
                "callee": "relativePath",
                "method": "split"
              },
              {
                "callee": "segments",
                "method": "slice"
              },
              {
                "callee": "segmentedPath",
                "method": "join"
              }
            ],
            "package": "src.utils.typescript",
            "path": "src/utils/typescript/parseFile.ts"
          }
        }
      }
    }
  },
  "meta": {
    "language": {
      "language": "typescript",
      "confidence": 0.6,
      "indicators": [
        "tsconfig.json",
        ".ts/.tsx files",
        "typescript dependency"
      ]
    },
    "projectName": "forensics",
    "timeStart": 1757346323199,
    "timeEnd": 1757346323295
  }
}